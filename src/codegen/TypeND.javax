/*
 * This file is part of TiPi (a Toolkit for Inverse Problems and Imaging)
 * developed by the MitiV project.
 *
 * Copyright (c) 2014 the MiTiV project, http://mitiv.univ-lyon1.fr/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

//# // Get common definitions.
//# include <common.javax>
//#
//# // Define the name of the class and its superclass.
//# if ${rank} == 0
//#     def superName = Scalar
//#     def className = ${Type}Scalar
//# else
//#     def superName = Array${rank}D
//#     def className = ${Type}${rank}D
//# end
//#
//# // Be prepared to deal with different types.
//# if ${type_id} == ${FLOAT}
//#   def zero = 0.0F
//# elif ${type_id} == ${DOUBLE}
//#   def zero = 0.0
//# else
//#   def zero = 0
//# end
//#
package ${package};

import mitiv.array.impl.Flat${className};
import mitiv.array.impl.Stridden${className};
import mitiv.base.Shape;
import mitiv.base.Shaped;
import mitiv.base.mapping.${Type}Function;
import mitiv.base.mapping.${Type}Scanner;
import mitiv.linalg.shaped.ShapedVector;
import mitiv.random.${Type}Generator;

//# def k = 1
//# def flatIndexDoc   =  i${k}
//# def shapeIndexDoc  =  i${k}
//# def strideIndexDoc =  stride${k}*i${k}
//# def strideIndex    =  stride${k}*i${k}
//# def close          =
//# while ${k} < ${rank}
//#     eval k += 1
//#     eval km2 = ${k} - 2
//#     eval km1 = ${k} - 1
//#     if ${k} < ${rank}
//#          def open  = (
//#          def close = ${close})
//#     else
//#          def open  =
//#     end
//#     def flatIndexDoc   = ${flatIndexDoc} + dim${km1}*${open}i${k}
//#     def shapeIndexDoc  = ${shapeIndexDoc} + shape[${km2}]*${open}i${k}
//#     def strideIndexDoc = ${strideIndexDoc} + stride${k}*i${k}
//#     def strideIndex    = stride${k}*i${k} + ${strideIndex}
//# end
//# def strideIndex    = offset + ${strideIndex}
//# def strideIndexDoc = offset + ${strideIndexDoc}
//# def flatIndexDoc   = ${flatIndexDoc}${close}
//# def shapeIndexDoc  = ${shapeIndexDoc}${close}
//#
//# //debug strideIndex: ${strideIndex}
//# //debug strideIndexDoc: ${strideIndexDoc}
//# //debug shapeIndexDoc: ${shapeIndexDoc}
//# //debug flatIndexDoc: ${flatIndexDoc}

/**
 * Define class for comprehensive ${rank}-dimensional arrays of ${type}'s.
 *
 * @author Éric Thiébaut.
 */
public abstract class ${className} extends ${superName} implements ${Type}Array {

    protected ${className}(${declDimList}) {
        super(${dimList});
    }

    protected ${className}(int[] dims) {
        super(dims);
    }

    protected ${className}(Shape shape) {
        super(shape);
    }

    @Override
    public final int getType() {
        return type;
    }

    /**
     * Query the value stored at a given position.
     //# def k = 1
     //# while ${k} <= ${rank}
     //#   def kth = ${}{nth_${k}}
     * @param i${k} - The index along the ${kth} dimension.
     //#   eval k += 1
     //# end
     * @return The value stored at position {@code (${indexList})}.
     */
    public abstract ${type} get(${declIndexList});

    /**
     * Set the value at a given position.
     //# def k = 1
     //# while ${k} <= ${rank}
     //#   def kth = ${}{nth_${k}}
     * @param i${k}    - The index along the ${kth} dimension.
     //#   eval k += 1
     //# end
     * @param value - The value to store at position {@code (${indexList})}.
     */
    public abstract void set(${declIndexList}, ${type} value);

    /*=======================================================================*/
    /* Provide default (non-optimized, except for the loop ordering)
     * implementation of methods that can be coded solely with the "set"
     * and "get" methods. */

    //# // Build the row-major and column-major loop structures.
    //# def rowMajorTemplate := ${alignLoop}for (int i${k} = 0; i${k} < dim${k}; ++i${k}) {
    //# def colMajorTemplate := ${alignLoop}for (int i${j} = 0; i${j} < dim${j}; ++i${j}) {
    //# suspend loopPrefix loopBody // will be interpolated later
    //# def alignLoop := ${loopPrefix}
    //# eval k = 1
    //# eval j = ${rank}
    //# def closeLoop    = ${alignLoop}}
    //# def rowMajorLoop = ${rowMajorTemplate}
    //# def colMajorLoop = ${colMajorTemplate}
    //# while ${k} < ${rank}
    //#     eval k += 1
    //#     eval j -= 1
    //#     def alignLoop   := ${alignLoop}${__INDENT__}
    //#     def rowMajorLoop = ${rowMajorLoop}${__NEWLINE__}${rowMajorTemplate}
    //#     def colMajorLoop = ${colMajorLoop}${__NEWLINE__}${colMajorTemplate}
    //#     def closeLoop    = ${alignLoop}}${__NEWLINE__}${closeLoop}
    //# end
    //# def alignLoop   := ${alignLoop}${__INDENT__}
    //# def colMajorLoop = ${colMajorLoop}${__NEWLINE__}${alignLoop}${loopBody}${__NEWLINE__}${closeLoop}
    //# def rowMajorLoop = ${rowMajorLoop}${__NEWLINE__}${alignLoop}${loopBody}${__NEWLINE__}${closeLoop}
    //# undef closeLoop
    //# //debug ${colMajorLoop}
    //# //debug ${rowMajorLoop}
    //#
    //# if ${rank} == 1
    //#     def loopIndent := ${__INDENT2__}
    //#     def loopPrefix := ${__INDENT2__}
    //#     def loop = ${colMajorLoop}
    //# else
    //#     def loopIndent := ${__INDENT2__}
    //#     def loopPrefix := ${__INDENT3__}
    //#     def loop = ${loopIndent}if (getOrder() == ROW_MAJOR) {
    //#     def loop = ${loop}${__NEWLINE__}${rowMajorLoop}
    //#     def loop = ${loop}${__NEWLINE__}${loopIndent}} else {
    //#     def loop = ${loop}${__NEWLINE__}${loopPrefix}/* Assume column-major order. */
    //#     def loop = ${loop}${__NEWLINE__}${colMajorLoop}
    //#     def loop = ${loop}${__NEWLINE__}${loopIndent}}
    //# end
    //# //debug ${loop}
    //#
    @Override
    public void fill(${type} value) {
        //# def loopBody = set(${indexList}, value);
        //# emit ${loop}
    }

    //# suspend loopOperator
    //# def loopExpr = get(${indexList}) ${loopOperator} value
    //# if ${type_id} <= 1
    //#     def loopExpr = (${type})(${loopExpr})
    //# end
    //# def loopBody = set(${indexList}, ${loopExpr});
    @Override
    public void increment(${type} value) {
        //# def loopOperator = +
        //# emit ${loop}
    }

    @Override
    public void decrement(${type} value) {
        //# def loopOperator = -
        //# emit ${loop}
    }

    @Override
    public void scale(${type} value) {
        //# def loopOperator = *
        //# emit ${loop}
    }

    //# suspend loopExpr
    //# def loopBody = set(${indexList}, ${loopExpr});
    @Override
    public void map(${Type}Function function) {
        //# def loopExpr = function.apply(get(${indexList}))
        //# emit ${loop}
    }

    @Override
    public void fill(${Type}Generator generator) {
        //# def loopExpr = generator.next${Type}()
        //# emit ${loop}
    }

    @Override
    public void scan(${Type}Scanner scanner)  {
        //# if ${rank} == 1
        scanner.initialize(get(0));
        for (int i1 = 1; i1 < dim1; ++i1) {
            scanner.update(get(i1));
        }
        //# else
        boolean skip = true;
        scanner.initialize(get(${zeroList}));
        //# def loopBody = if (skip) skip = false; else scanner.update(get(${indexList}));
        //# emit ${loop}
        //# end
    }

    /* Note that the following default implementation of the "flatten" method
     * is always returning a copy of the contents whatever the value of the
     * "forceCopy" argument.
     * @see devel.eric.array.base.${Type}Array#flatten(boolean)
     */
    @Override
    public ${type}[] flatten(boolean forceCopy) {
        /* Copy the elements in column-major order. */
        ${type}[] out = new ${type}[number];
        //# if ${rank} == 1
        for (int i1 = 0; i1 < dim1; ++i1) {
            out[i1] = get(i1);
        }
        //# else
        int i = -1;
        //#     def loopPrefix := ${__INDENT2__}
        //#     def loopBody = out[++i] = get(${indexList});
        //#     emit ${colMajorLoop}
        //# end
        return out;
    }

    @Override
    public ${type}[] flatten() {
        return flatten(false);
    }

    //# def dst = ${BYTE}
    //# while ${dst} <= ${DOUBLE}
    //#     def dst_type = ${}{type_${dst}}
    //#     def dst_Type = ${}{Type_${dst}}
    //#     def dst_TYPE = ${}{TYPE_${dst}}
    //#     if ${dst} == 2
    //#         def a = an
    //#         def A = An
    //#     else
    //#         def a = a
    //#         def A = A
    //#     end
    //#     def argDimList = dim1
    //#     def k = 1
    //#     while ${k} < ${rank}
    //#         eval k += 1
    //#         def argDimList = ${argDimList}, dim${k}
    //#     end
    /**
     * Convert instance into ${a} ${dst_Type}${rank}D.
     * <p>
     * The operation is lazy, in the sense that {@code this} is returned if it
     * is already of the requested type.
     *
     * @return ${A} ${dst_Type}${rank}D whose values has been converted into ${dst_type}'s
     *         from those of {@code this}.
     */
    @Override
    public ${dst_Type}${rank}D to${dst_Type}() {
        //# if ${type_id} == ${dst}
        return this;
        //# else
        ${dst_type}[] out = new ${dst_type}[number];
        int i = -1;
        //#     def loopPrefix := ${__INDENT2__}
        //#     def loopBody = out[++i] = (${dst_type})get(${indexList});
        //#     emit ${colMajorLoop}
        return ${dst_Type}${rank}D.wrap(out, ${argDimList});
        //# end
    }
    //#     eval dst += 1
    //# end

    @Override
    public ${className} copy() {
        // TODO
        return null;
    }

    @Override
    public void assign(ShapedArray arr) {
        // TODO
    }

    @Override
    public void assign(ShapedVector vec) {
        // TODO
    }


    /*=======================================================================*/
    /* ARRAY FACTORIES */

    /**
     * Create a ${rank}D array of ${type}'s with given dimensions.
     * <p>
     * This method creates a ${rank}D array of ${type}'s with zero offset, contiguous
     * elements and column-major order.  All dimensions must at least 1.
     //# def k = 1
     //# while ${k} <= ${rank}
     //#   def kth = ${}{nth_${k}}
     * @param dim${k} - The ${kth} dimension of the ${rank}D array.
     //#   eval k += 1
     //# end
     * @return A new ${rank}D array of ${type}'s.
     * @see {@link Shaped#COLUMN_MAJOR}
     */
    public static ${className} create(${declDimList}) {
        return new Flat${className}(${dimList});
    }

    /**
     * Create a ${rank}D array of ${type}'s with given shape.
     * <p>
     * This method creates a ${rank}D array of ${type}'s with zero offset, contiguous
     * elements and column-major order.
     * @param dims - The list of dimensions of the ${rank}D array (all dimensions
     *               must at least 1).  This argument is not referenced by
     *               the returned object and its contents can be modified
     *               after calling this method.
     * @return A new ${rank}D array of ${type}'s.
     * @see {@link Shaped#COLUMN_MAJOR}
     */
    public static ${className} create(int[] dims) {
        return new Flat${className}(dims);
    }

    /**
     * Create a ${rank}D array of ${type}'s with given shape.
     * <p>
     * This method creates a ${rank}D array of ${type}'s with zero offset, contiguous
     * elements and column-major order.
     * @param shape      - The shape of the ${rank}D array.
     * @param cloneShape - If true, the <b>shape</b> argument is duplicated;
     *                     otherwise, the returned object will reference
     *                     <b>shape</b> whose contents <b><i>must not be
     *                     modified</i></b> while the returned object is in
     *                     use.
     * @return A new ${rank}D array of ${type}'s.
     * @see {@link Shaped#COLUMN_MAJOR}
     */
    public static ${className} create(Shape shape) {
        return new Flat${className}(shape);
    }

    /**
     * Wrap an existing array in a ${rank}D array of ${type}'s with given dimensions.
     * <p>
     * The returned ${rank}D array have zero offset, contiguous elements and
     * column-major storage order.  More specifically:
     * <pre>arr.get(${indexList}) = data[${flatIndexDoc}]</pre>
     * with {@code arr} the returned ${rank}D array.
     * @param data - The data to wrap in the ${rank}D array.
     //# def k = 1
     //# while ${k} <= ${rank}
     //#   def kth = ${}{nth_${k}}
     * @param dim${k} - The ${kth} dimension of the ${rank}D array.
     //#   eval k += 1
     //# end
     * @return A ${rank}D array sharing the elements of <b>data</b>.
     * @see {@link Shaped#COLUMN_MAJOR}
     */
    public static ${className} wrap(${type}[] data, ${declDimList}) {
        return new Flat${className}(data, ${dimList});
    }

    /**
     * Wrap an existing array in a ${rank}D array of ${type}'s with given shape.
     * <p>
     * The returned ${rank}D array have zero offset, contiguous elements and
     * column-major storage order.  More specifically:
     * <pre>arr.get(${indexList}) = data[${shapeIndexDoc}]</pre>
     * with {@code arr} the returned ${rank}D array.
     * @param data - The data to wrap in the ${rank}D array.
     * @param dims - The list of dimensions of the ${rank}D array.  This argument is
     *                not referenced by the returned object and its contents
     *                can be modified after the call to this method.
     * @return A new ${rank}D array of ${type}'s sharing the elements of <b>data</b>.
     * @see {@link Shaped#COLUMN_MAJOR}
     */
    public static ${className} wrap(${type}[] data, int[] dims) {
        return new Flat${className}(data, dims);
    }

    /**
     * Wrap an existing array in a ${rank}D array of ${type}'s with given shape.
     * <p>
     * The returned ${rank}D array have zero offset, contiguous elements and
     * column-major storage order.  More specifically:
     * <pre>arr.get(${indexList}) = data[${shapeIndexDoc}]</pre>
     * with {@code arr} the returned ${rank}D array.
     * @param data       - The data to wrap in the ${rank}D array.
     * @param shape      - The shape of the ${rank}D array.
     * @param cloneShape - If true, the <b>shape</b> argument is duplicated;
     *                     otherwise, the returned object will reference
     *                     <b>shape</b> whose contents <b><i>must not be
     *                     modified</i></b> while the returned object is in
     *                     use.
     * @return A new ${rank}D array of ${type}'s sharing the elements of <b>data</b>.
     * @see {@link Shaped#COLUMN_MAJOR}
     */
    public static ${className} wrap(${type}[] data, Shape shape) {
        return new Flat${className}(data, shape);
    }

    /**
     * Wrap an existing array in a ${rank}D array of ${type}'s with given dimensions,
     * strides and offset.
     * <p>
     * This creates a ${rank}D array of dimensions {{@code ${dimList}}}
     * sharing (part of) the contents of {@code data} in arbitrary storage
     * order.  More specifically:
     * <pre>arr.get(${indexList}) = data[${strideIndexDoc}]</pre>
     * with {@code arr} the returned ${rank}D array.
     * @param data    - The array to wrap in the ${rank}D array.
     //# def k = 1
     //# while ${k} <= ${rank}
     //#   def kth = ${}{nth_${k}}
     * @param dim${k}    - The ${kth} dimension of the ${rank}D array.
     //#   eval k += 1
     //# end
     * @param offset  - The offset in {@code data} of element (${zeroList}) of
     *                  the ${rank}D array.
     //# def k = 1
     //# while ${k} <= ${rank}
     //#   def kth = ${}{nth_${k}}
     * @param stride${k} - The stride along the ${kth} dimension.
     //#   eval k += 1
     //# end
     * @return A ${rank}D array sharing the elements of <b>data</b>.
     */
    public static ${className} wrap(${type}[] data, ${declDimList},
            int offset, ${declStrideList}) {
        return new Stridden${className}(data, ${dimList}, offset, ${strideList});
    }

}

/*
 * Local Variables:
 * mode: Java
 * tab-width: 8
 * indent-tabs-mode: nil
 * c-basic-offset: 4
 * fill-column: 78
 * coding: utf-8
 * ispell-local-dictionary: "american"
 * End:
 */
